package com.xiaoyv.bangumi.ui.feature.sign.up.verify

import android.content.Intent
import android.os.Bundle
import android.view.MenuItem
import androidx.lifecycle.LifecycleOwner
import com.blankj.utilcode.util.KeyboardUtils
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.xiaoyv.bangumi.databinding.ActivitySignUpVerifyBinding
import com.xiaoyv.bangumi.helper.RouteHelper
import com.xiaoyv.blueprint.base.mvvm.normal.BaseViewModelActivity
import com.xiaoyv.blueprint.constant.NavKey
import com.xiaoyv.blueprint.kts.activity
import com.xiaoyv.common.kts.CommonString
import com.xiaoyv.common.kts.initNavBack
import com.xiaoyv.common.widget.dialog.AnimeLoadingDialog
import com.xiaoyv.widget.callback.setOnFastLimitClickListener
import com.xiaoyv.widget.dialog.UiDialog
import com.xiaoyv.widget.kts.getParcelObj

class SignUpVerifyActivity :
    BaseViewModelActivity<ActivitySignUpVerifyBinding, SignUpVerifyViewModel>() {
    override fun initIntentData(intent: Intent, bundle: Bundle, isNewIntent: Boolean) {
        viewModel.signUpInfo = bundle.getParcelObj(NavKey.KEY_PARCELABLE)
    }

    override fun initView() {
        binding.toolbar.initNavBack(this)
    }

    override fun initData() {

    }

    /**
     * 03AFcWeA5NkAA0kYRhqDFyNAXqVJj3PTVwunhj5Jo6myzrmXi38WytNV7aDZotnI7i3EraSsBSze7yQwLPhQxL8ihexDIm5iGGheDB3vL_yE3JIIlIfVo5hJoE7V3x4omYGx4h1gh1iEcSsfmwOLXvdd5G2bCu7uC9-9sFTHrUrzxZN9w4V67xiU2QYzk7Wj9SG9cTAsq9TsD17AxwREwBQNZPoijRbT0EewErRcxh-JXwGKj1GA19bWCQHWZW8U0bqrNXUV4adFIJNGkygAvCPWuNvvb--juiIG8MRgGRLk2WmDW-Dx-ul039CCUbl1Lz-tpNuwCapZGgO8D-_u7HPmr-X1EkHVn3haBOxUmZqwRwkOgcXHiZyBEMi2UqF3s8yyHtQBoMSWYcAiPT_7ilFZQSN5W5nJB_cxvHIBWk-WDZsU3D8a3E-r0DUWkA5nh-ac7OBW4WYJMAQ9Z71y2FIYNOOWwd50Ijt6gyXVBSTX0egTAEA0DQEGVQ_V4qdaiAPnDqn6vd030uWOASbUY7tIHVjsXLLUdxvIWEfRlpdUBbX8Kstft-ACx-42BkjL9znsrKZmApvWRj2bGeaJUeTS0qgQDLRh4J1RKdmQkksWCL3BstwmptBRbRH_PCL1OLVO_ZSpz53i6XY2Ektv0BRm9OPr27KWhz7g",null,120,null,null,null,["bgdata","","\u003d","\u003d"],"05AGh-wNQIMbgyu6EhlAU2CC4pHuxRRu9vMZGp4Gma2VRCVTx5SFQGtfAfV55uReswE5JCldXlrpUXPWnyQeyXCrwPB0dquFoukiVjSmNsGIgIv4Cr7VDwTp4IJjy5KsRKntgL-RvrycdsN15Yx7EgxTy6reqkUBT37g9RAJ2jXJbU-paOVSvPU6culMajlcgFMLAwGz8gJmpbo-d-Pyueo-5aN3iLEhpx5dqHOJ77pzhiyMs",null,null,null,"09AGh-wNRtDY7aTD_MDSKinmADJqE8coBPZ6E-BoGiS_JO0RPlZUk5XDeSr4pos6Xw6jTT5iU7QKhH08kiHbyIlAyIKiQZrgaNxNqK8g",0,"0aAGh-wNQogYKzI3PHjHi0ssC_F6A9Kzj3zVHOSFK2PnAngnuYP5_L_p1X5OYIJZkQtxHBts4","0bAMKMk5FLDK0Pf2Z6mOMd_DNWFNl1vbwARbz3URrbmWjAWaWdxy7SyVK6PtbVC1XCjceBFvV8qQ",0]
     * 03AFcWeA5NkAA0kYRhqDFyNAXqVJj3PTVwunhj5Jo6myzrmXi38WytNV7aDZotnI7i3EraSsBSze7yQwLPhQxL8ihexDIm5iGGheDB3vL_yE3JIIlIfVo5hJoE7V3x4omYGx4h1gh1iEcSsfmwOLXvdd5G2bCu7uC9-9sFTHrUrzxZN9w4V67xiU2QYzk7Wj9SG9cTAsq9TsD17AxwREwBQNZPoijRbT0EewErRcxh-JXwGKj1GA19bWCQHWZW8U0bqrNXUV4adFIJNGkygAvCPWuNvvb--juiIG8MRgGRLk2WmDW-Dx-ul039CCUbl1Lz-tpNuwCapZGgO8D-_u7HPmr-X1EkHVn3haBOxUmZqwRwkOgcXHiZyBEMi2UqF3s8yyHtQBoMSWYcAiPT_7ilFZQSN5W5nJB_cxvHIBWk-WDZsU3D8a3E-r0DUWkA5nh-ac7OBW4WYJMAQ9Z71y2FIYNOOWwd50Ijt6gyXVBSTX0egTAEA0DQEGVQ_V4qdaiAPnDqn6vd030uWOASbUY7tIHVjsXLLUdxvIWEfRlpdUBbX8Kstft-ACx-42BkjL9znsrKZmApvWRj2bGeaJUeTS0qgQDLRh4J1RKdmQkksWCL3BstwmptBRbRH_PCL1OLVO_ZSpz53i6XY2Ektv0BRm9OPr27KWhz7g
     * 03AFcWeA6Br5SKQXJjAbYv9jUewKWc9xuR5yD0B-End_xISsntUhdYQlAWeF_aE4UbiG4Bz7Yrj3JQyI5fxPjCKRbnLNthbPt2xyu2c6i50G4KNzeUng_LeyKrAyDMGAG-8E_2jba5CbOJY19FLc-cqkqYgPAsZGyucfBBRTR4dMhonPlqpzUL42onNxVTNfSnnkLD6YlogGnDevvMGYCpw4hXhSDzg9Muildjc3tcZ_nEwn3_XPsiAC1Mlvq4lKn6SnrxpDhGjpOzmcH0m8vuOFP3wWADHURqahue2T3FR1eN19NvUpIuQPhQD8vUV5l5wSRGyZvMKknMpsCmuXIvKe_tovRjkhOu3xawJyn3n17BJutVvFGlkfxsYy8Ec1aQcdmHUWe7kPQG6y1jZzn8ljYxy48f4tSmMA1GqCJUYpKFErytJo0wnyyev4qqOzfCiKA3nYLSYiGP_SpQzcq3Mfrr5VkNbuYZ3X-9tPzh_744NL3FwmlbycZhZRNBJkGn7qf7awDNVrSqbuV8Z6VlXJWF0BJZA00Ep0YSeLC4vY87mEs1aev52aI4bDTZt3vVjWtlROSK6CcKd4hiR_S5f55uE7cLsfa75iabo-NDt3hOpO7Ms-ASwemEU-D3jZV4ok4b4mNXIa4m9nv_X4M-BUq6JukamD6Gi4MGkOPHRak_x9eHT34xL9bhHEAspf5_A2tB_41Dye8x3Xh6f9Bsgj5vqBTxJ_-hyFQQnpt4cjKjf7XJCPgpXNaAJJVw_TLlp0StbjfcLErA8MVv1YHY1tmiiYwrTRzaQnXYmNrptrDCJ79uE8CPWJ91KMTAtrwEcHIGiNEPMo-JnAAWD_yYluziZ8YXSf48YMXtiist8uP7wGNdxrRxrnllhZrXIiuIfusX7u_dy0CqAzdjbQHLo435YJvINM5hopHLWBQ6iEKvlffXeI8PmRU5Ez6kCqaB3UzPBx743BVwt7mxt_7G8f94iMhlZ5aV6xYjq9N_mooP7uXFinB73ZnhG81BISKZjASrH04MD5os1M6458MhgyxV6QkavPEvwy5fgLj9Pqnzt2NpisYnm52rh5zty_Ujl1XE4Tc4bLPRi0HLcvfzCrEjtXIdjG_-NVKlLO-0YHpORAXI0xV8iRGrmOOBid-Hv6WNQ_D5ltJGUga0vXnVD55waAqP_uoJ-F2arkoScG7YD66PYHHMWY0EdHFZfX3x6Rt__Rq_WDTOShZOQw7CD_zZVsUIGECFF4QhOqWaQEklIIp0VKYI1JvNnm63EOve6N3UCYufuRhq5MlW6vAfwIaahqF7vxFo-2YzpzzI99AuhDWVHM0txGfQEF7Cv47sRsIVpWEnXyBjbcyhoB3uradTJNpXCPloasx-vcT9PiGYufsKR4_26Nv1bOPjyBC20USWzgtjem-ObpqFjmymNrOEsbxSYOTg8ix0NPLx9bpu-1OzgA89iFBnzd0EupfBSaHxAerOauaNzcweGyWMddVunyBLG1BHulij50nAbsYVJ2JMD5RodX9ktz2x6mFo59tDFvSklaauOW9ePDrCnx94ncMz-ZflxU03nynpYR41r2OZZCAIlrJMjff7_JZugIPZm1gSrfhgcq0YAqZjuPT_TBMCwXtKl8q0vn6q1gst6bJuDDTotK1XxprIcxRg7Bu-9cMWejl9
     */
    override fun initListener() {
        binding.btnVerify.setOnFastLimitClickListener {
            val verifyCode = binding.inputVerify.text.toString().trim()

            binding.tilVerify.error =
                if (verifyCode.isBlank()) getString(CommonString.sign_up_input_error_email_code) else null

            if (verifyCode.isNotBlank()) {
                KeyboardUtils.hideSoftInput(this)

                viewModel.doSignUpVerify(verifyCode)
            }
        }
    }

    override fun LifecycleOwner.initViewObserver() {
        viewModel.onSignUpVerifyLiveData.observe(this) {
            val success = it != null && it.success
            val errorMsg = it?.error.orEmpty()
            val message = it?.message.orEmpty()

            MaterialAlertDialogBuilder(activity)
                .setTitle(
                    if (success) getString(CommonString.login_result_tip)
                    else getString(CommonString.sign_up_verify_error)
                )
                .setCancelable(success)
                .setMessage(if (success) message else errorMsg)
                .setPositiveButton(getString(CommonString.login_result_known)) { _, _ ->
                    if (success) {
                        finish()
                    } else {
                        binding.inputVerify.text = null
                    }
                }
                .create()
                .apply {
                    setCanceledOnTouchOutside(success)
                }.show()
        }
    }

    override fun onCreateLoadingDialog(): UiDialog {
        return AnimeLoadingDialog(this)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        item.initNavBack(this)
        return super.onOptionsItemSelected(item)
    }
}